#!/usr/bin/env ruby
# frozen_string_literal: true

if File.directory?("#{File.dirname(__FILE__)}/../vendor")
    require 'bundler/setup'
end
require 'optparse'
require 'fileutils'
require 'parallel'
require 'English'
require 'terminal-table'
require_relative '../lib/tfctl'

PROJECT_ROOT = Dir.pwd

#
# Process CLI arguments
#

options = {
    account:     nil,
    ou:          nil,
    all:         nil,
    show_config: false,
    config_file: 'tfctl.yaml',
    unbuffered:  false,
    debug:       false,
    use_cache:   false,
}

optparse = OptionParser.new do |opts|
    opts.on('-a', '--account=name', 'Target a specific AWS account') do |o|
        options[:account] = o
    end
    opts.on('-o', '--ou=organization_unit', 'Target accounts in an Organization Unit (uses regex matching)') do |o|
        options[:ou] = o
    end
    opts.on('--all', 'Target all accounts') do
        options[:all] = true
    end
    opts.on('-c', '--config-file=config', 'Path to config file') do |o|
        options[:config_file] = o
    end
    opts.on('-s', '--show-config', 'Display configuration') do
        options[:show_config] = true
    end
    opts.on('-l', '--list-accounts', 'List discovered accounts') do
        options[:list_accounts] = true
    end
    opts.on('-x', '--use-cache', 'Use cached AWS organization data') do
        options[:use_cache] = true
    end
    opts.on('-u', '--unbuffered', 'Disable buffering of Terraform output') do
        options[:unbuffered] = true
    end
    opts.on('-d', '--debug', 'Turn on debug messages') do
        options[:debug] = true
    end
    opts.on('-v', '--version', 'Show version') do
        puts Tfctl::VERSION
        exit
    end
end


begin
    optparse.parse!

    # Validate CLI arguments

    unless File.exist? options[:config_file]
        raise OptionParser::InvalidOption,
              "Config file not found in: #{options[:config_file]}"
    end

    unless File.exist? options[:config_file]
        raise OptionParser::InvalidOption, "Config file #{options[:config_file]} not found."
    end

    # Validate targets
    targetting_opts = %i[account ou all]
    targets_set = []
    options.each do |k, v|
        if targetting_opts.include?(k) and !v.nil?
            targets_set << k.to_s
        end
    end
    if targets_set.length > 1
        raise OptionParser::InvalidOption,
              "Too many target options set: #{targets_set.join(', ')}.  Only one can be specified."
    end
    if targets_set.empty? and options[:show_config] == false
        raise OptionParser::InvalidOption, 'Please specify target'
    end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    warn $ERROR_INFO.to_s
    warn optparse
    exit 2
end



# Execute terraform in target accounts
def run_account(config, account, options, tf_argv, log)

    # Skip excluded accounts
    if account[:excluded] == true
        log.info "#{account[:name]}: excluded, skipping"
        return
    end

    # Generate Terraform run directory with configured providers, backend and
    # profiles for the target account.  This is where Terraform will be
    # executed from.
    log.info "#{account[:name]}: Generating Terraform run directory"
    Tfctl::Generator.make(
        account: account,
        config:  config,
    )

    log.info "#{account[:name]}: Executing Terraform #{tf_argv[0]}"
    Tfctl::Executor.run(
        account_name: account[:name],
        config_name:  config[:config_name],
        unbuffered:   options[:unbuffered],
        log:          log,
        argv:         tf_argv,
    )
end


#
# Main
#

begin
    # Set up logging
    log_level = options[:debug] ? Logger::DEBUG : Logger::INFO
    log = Tfctl::Logger.new(log_level)

    log.info "tfctl #{Tfctl::VERSION} running"

    config_name = File.basename(options[:config_file]).chomp('.yaml')
    config_name = 'default' if config_name == 'tfctl'
    log.info "Using config: #{config_name}"

    log.info 'Working out AWS account topology'

    yaml_config = YAML.safe_load(File.read(options[:config_file]),  aliases: true)
    Tfctl::Schema.validate(yaml_config)
    yaml_config.symbolize_names!

    org_units = yaml_config[:organization_units].keys
    aws_org_accounts = Tfctl::AwsOrg.new(yaml_config[:tfctl_role_arn]).accounts(org_units)

    log.info 'Merging configuration'

    config = Tfctl::Config.new(
        config_name:    config_name,
        yaml_config:    yaml_config,
        aws_org_config: aws_org_accounts,
        use_cache:      options[:use_cache],
    )

    if options[:show_config]
        puts config.to_yaml
        exit 0
    end

    # Find target accounts

    if options[:account]
        accounts = config.find_accounts(:name, options[:account])
    elsif options[:ou]
        accounts = config.find_accounts_regex(:ou_path, options[:ou])
    elsif options[:all]
        accounts = config[:accounts]
    else
        raise Tfctl::Error, 'Missing target'
    end

    # List target accounts

    if options[:list_accounts]
        log.info "Listing accounts\n"
        table = Terminal::Table.new do |t|
            t.style = {
                border_x:     '',
                border_y:     '',
                border_i:     '',
                padding_left: 0,
            }
            t << %w[ACCOUNT_ID OU NAME]
            accounts.each do |account|
                t << [account[:id], account[:ou_path], account[:name]]
            end
        end

        puts table
        exit 0
    end

    # Execute Terraform in target accounts

    Parallel.each(accounts, in_processes: 8) do |ac|
        run_account(config, ac, options, ARGV, log)
    end

    log.info 'Done'
rescue Tfctl::Error => e
    log.error(e)
    exit 1
rescue Tfctl::ValidationError => e
    log.error(e)
    e.issues.each do |issue|
        log.error("Parameter: #{issue[:data_pointer]}") unless issue[:data_pointer] == ''
        log.error(issue[:details]) unless issue[:details].nil?
    end
    exit 2
end
